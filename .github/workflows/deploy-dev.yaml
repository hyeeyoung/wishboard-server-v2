name: dev-monorepo-deploy

on:
  push:
    branches: [ develop ]
  # 직접 트리거
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'develop'
      module:
        description: 'Module to deploy (api | parsing-api | push)'
        required: true
        default: 'api'

env:
  AWS_REGION: ap-northeast-2

jobs:
  changes:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      parsing_api: ${{ steps.filter.outputs.parsing_api }}
      push: ${{ steps.filter.outputs.push }}
    steps:
      - uses: actions/checkout@v3

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'api/**'
            parsing_api:
              - 'parsing-api/**'
            push:
              - 'push/**'

  # ---------------------------------------------------------------------------
  # Spring API (Gradle / JDK 21)
  # ---------------------------------------------------------------------------
  build-api:
    needs: [ changes ]
    if: |
      (github.event_name == 'push' && needs.changes.outputs.api == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.module == 'api')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    env:
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME_DEV }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Create Spring secret files
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_DEV_YML }}" > src/main/resources/application-dev.yml

      - name: Set up JDK 21 (Corretto)
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build (skip tests)
        run: ./gradlew build -x test

      - name: Package artefacts
        run: |
          mkdir -p wishboard-v2-build-dev
          cp -r build/libs/* wishboard-v2-build-dev/
          cp v2-pm2-run-config.js wishboard-v2-build-dev/
          cp deploy.sh wishboard-v2-build-dev/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 cp --recursive wishboard-v2-build-dev s3://$AWS_S3_BUCKET_NAME/wishboard-v2-build-dev

  # ---------------------------------------------------------------------------
  # parsing-api (Node 18.x)
  # ---------------------------------------------------------------------------
  build-parsing-api:
    if: |
      (github.event_name == 'push' && needs.changes.outputs.parsing_api == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.module == 'parsing-api')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: parsing-api
    strategy:
      matrix:
        node-version: [ 18.20.8 ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Verify npm version
        run: npm -v

      - name: npm ci (clean install)
        run: npm ci

      - name: ESLint check
        run: npm run lint

      - name: Create .env
        run: |
          touch .env
          echo NODE_ENV="development" >> .env
          echo "${{ secrets.PARSING_API_ENV_DEV }}" > .env

      - name: Build (dev)
        run: npm run build --if-present

      - name: Copy ecosystem.config.js
        run: cp ./ecosystem.config.js ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload dist to S3
        run: |
          aws s3 cp --recursive dist s3://${{ secrets.AWS_BUILD_BUCKET }}

  # ---------------------------------------------------------------------------
  # push (Node 18.x)
  # ---------------------------------------------------------------------------
  build-push:
    if: |
      (github.event_name == 'push' && needs.changes.outputs.push == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.module == 'push')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: push
    strategy:
      matrix:
        node-version: [ 18.20.8 ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Verify npm version
        run: npm -v

      - name: npm ci (clean install)
        run: npm ci

      - name: ESLint check
        run: npm run lint

      - name: Create .env
        run: |
          touch .env
          echo NODE_ENV="development" >> .env
          echo "${{ secrets.PUSH_ENV_DEV }}" > .env

      - name: Build (dev)
        run: npm run build --if-present

      - name: Copy ecosystem.config.js
        run: cp ./ecosystem.config.js ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload dist to S3
        run: |
          aws s3 cp --recursive dist s3://${{ secrets.AWS_BUILD_BUCKET }}
